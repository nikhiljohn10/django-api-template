#!/bin/bash

export $(cat .env | grep "API_HOST\|API_PORT\|API_PROD_HOST\|API_PROD_PORT\|SSL_CERTIFICATE_FILE\|SSL_PRIVATE_KEY_FILE\|DJANGO_PRODUCTION_POSTGRES" | xargs)

function reload {
	. scripts/django
}

function clean {
	find ./config -name __pycache__ -exec rm -rf {} +
	find ./api -name __pycache__ -exec rm -rf {} +
	find . -name "*.log" -exec rm -rf {} +
	find ./api/migrations -type f ! -name __init__.py -exec rm -rf {} +
	rm -rf db.sqlite3 debug
}

function install_deps {
	pip install -U pip
	pip install -r requirements.txt
}

function config_env {
	if [[ -f ".env" ]]; then
		mv -f .env .env.bak
	fi
	cp .env.example .env
	echo "DJANGO_SECRET_KEY=$(python -c 'from django.core.management.utils import get_random_secret_key;print(get_random_secret_key())')" >> .env
}

function migrate_db {
	python manage.py makemigrations
	python manage.py migrate
}

function load_data {
	echo "==> Removing all data from the database..."
	python manage.py flush --noinput

	echo "==> Loading owners data..."
	python manage.py loaddata scripts/sample_data/owners.json

	echo "==> Loading manufacturers data..."
	python manage.py loaddata scripts/sample_data/manufacturers.json

	echo "==> Loading cars data..."
	python manage.py loaddata scripts/sample_data/cars.json

	echo "==> Done!"

	echo "==> Username: admin"
	echo "==> Password: @dmin1234"
	echo "==> Login URL: http://$API_HOST:$API_PORT/api/v1/auth/login/"
	echo
}

function start_postgresql {
	docker run --name postgres_12_4 -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres:12.4-alpine
}

function stop_postgresql {
	docker stop postgres_12_4
}

function kill_postgresql {
	stop_postgresql
	docker rm postgres_12_4
}


function make_cert {
	mkdir -p ssl
	if [[ ! -f "$SSL_CERTIFICATE_FILE" ]] || [[ ! -f "$SSL_PRIVATE_KEY_FILE" ]]; then
	  openssl req -x509 -newkey rsa:4096 -nodes -out $SSL_CERTIFICATE_FILE -keyout $SSL_PRIVATE_KEY_FILE -days 365
	else
		echo "Certificates found."
		echo "Remove certificates and run 'make_cert' to regenerate certificates"
	fi
}

function clean_cert {
	rm -rf ssl
}

function api_dev {
	python manage.py runserver $API_HOST:$API_PORT
}

function api_init {
	clean
	install_deps
	config_env
	migrate_db
	load_data
}

function api_deploy {
	make_cert
	python manage.py makemigrations --settings=config.settings.production
	python manage.py migrate --settings=config.settings.production
	python manage.py check --settings=config.settings.production --deploy
	if [[ "$1" == "admin" ]]; then
		python manage.py flush --no-input --settings=config.settings.production
		python manage.py createsuperuser --settings=config.settings.production --username admin --email admin@localhost
		if [[ "$?" != "0" ]]; then
			return 1
		fi
	fi
	gunicorn \
		-w 3 \
		-b $API_PROD_HOST:$API_PROD_PORT \
		--certfile=$SSL_CERTIFICATE_FILE \
		--keyfile=$SSL_PRIVATE_KEY_FILE \
		config.wsgi
}

function api_help {
	echo
	echo "Commands:"
	echo
	echo "    api_init   : Initialise API server"
	echo "    api_dev    : Run development API server"
	echo "    api_deploy : Deploy API server using gunicorn"
	echo "    migrate_db : Migrate database"
	echo "    load_data  : Load dummy data in to database"
	echo
}

api_help